pvul_recov <- 0.5       #Propotion of recovered fish that go to the vulnerable pool
sd_obs <- .2            #standard deviation of observation error of fishers, such that greater values lead to greater divergence from perfect knowledge
cpue_base <- 0.5          #catch rate required for a satisfaction or utility of 1
val_power <- 1.5          #power function of how satisaction increases with catch rate
#scrap code for picturing alternative value functions
#y=seq(0,10, length=100)
#sat=(y/cpue_base)^val_power
#plot(y,sat, type="l", xlab="cpue",ylab="sat")
max_eff_wknd <- 10      #max effort possible on a weekend
max_eff_wkdy <- 10      #max effort possible on a weekday
cpue_half <- 3                #inflection point for logistic effort
sdcpue <- 5                   #sigma of logistic effort
theta<-list()
theta$No <- No
theta$M <- M
theta$q <- q
theta$v1 <- v1
theta$v2 <- v2
theta$rel_surv <- rel_surv
theta$recov <- recov
theta$pvul_recov <- pvul_recov
theta$cpue_base <- cpue_base          #catch rate required for a satisfaction or utility of 1
theta$val_power <- val_power          #power function of how satisaction increases with catch rate
theta$cpue_half <- cpue_half                #inflection point for logistic effort
theta$sdcpue <- sdcpue                   #sigma of logistic effort
theta$max_eff_wknd <- max_eff_wknd      #max effort possible on a weekend
theta$max_eff_wkdy <- max_eff_wkdy      #max effort possible on a weekday
#effort sequences
all_open <- rep(1,unit_time)                              #open all the time
week_2 <- rep(c(1,rep(0,5),1),length.out=unit_time)       #open weekends or two days a week
week_1 <- rep(c(1,rep(0,6)),length.out=unit_time)         #Open one weekend day a week
twoweek_2 <- rep(c(1,rep(0,12),1),length.out=unit_time)   #Open two weekend days every two weeks
twoweek_1 <- rep(c(1,rep(0,13)),length.out=unit_time)     #open 1 weekend day every two weeks
month_1 <- rep(c(1,rep(0,29)),length.out=unit_time)       #open 1 weekend day a month
### Procedure Section ###
fun <- function(theta,open_seq){
No <- theta$No
M <- theta$M
q <- theta$q
v1 <- theta$v1
v2 <- theta$v2
rel_surv <- theta$rel_surv
recov <- theta$recov
pvul_recov <- theta$pvul_recov
cpue_base <- theta$cpue_base
val_power <- theta$val_power
cpue_half <- theta$cpue_half
sdcpue <- theta$sdcpue
max_eff_wknd <- theta$max_eff_wknd
max_eff_wkdy <- theta$max_eff_wkdy
surv <- exp(-M)         #survival
#vectors
day <- seq(1,unit_time, by=1)
vul=NULL; invul = NULL; refract = NULL; max_eff = NULL; pmax_eff = NULL;
effort = NULL; catch = NULL; vul_surv = NULL; invul_surv = NULL; refract_surv = NULL;
alive = NULL; eff_cum = NULL; cpue = NULL; value = NULL; obs_err =NULL;
#  open_seq=NULL;
#independent vectors
#  open_seq = week_2;
vul_init <- v1/(v1+v2)*No     #initial number of vulnerable fish
max_cpue <- q*vul_init        #max cpue, don't think this is used
max_eff = rep(c(max_eff_wknd, rep(max_eff_wkdy,5),max_eff_wknd),length.out=unit_time)   #gives the max effort for any given day, assuming potential difference between weekends and weekdays
#initial values
vul[1] = vul_init
invul[1] = No-vul_init
refract[1] = No-(vul[1]+invul[1])
obs_err[1] =    1 #rnorm(1,1, sd_obs)     #set to 1 now, switch to rnorm for observation error and departure from perfect knowledge
pmax_eff[1] = 1/(1+exp(-(q*(obs_err[1]*vul[1])-cpue_half)/sdcpue))
effort[1] = max_eff[1]*pmax_eff[1]*open_seq[1]
eff_cum[1] = effort[1]
catch[1] = vul[1]*(1-exp(-q*effort[1]))
vul_surv[1] = surv*(vul[1]-catch[1])
invul_surv[1] = invul[1]*surv
refract_surv[1] = (refract[1] + catch[1]*rel_prop*rel_surv)*surv
alive = vul[1]+invul[1]+refract[1]
cpue[1] = ifelse(effort[1]>0,catch[1]/effort[1],0)
value[1] = effort[1]*(cpue[1]/cpue_base)^val_power
#time dynamic values
for(i in 2:length(day)){
vul[i] = vul_surv[i-1] - v2*vul_surv[i-1] + v1*invul_surv[i-1] + recov*refract_surv[i-1]*pvul_recov
invul[i] = invul_surv[i-1] - v1*invul_surv[i-1] + v2*vul_surv[i-1] + refract_surv[i-1]*recov*(1-pvul_recov)
refract[i] = refract_surv[i-1]*(1-recov)
obs_err[i] = 1  #rnorm(1,1,sd_obs)
pmax_eff[i] = 1/(1+exp(-(q*(obs_err[i]*vul[i])-cpue_half)/sdcpue))
effort[i] = max_eff[i]*pmax_eff[i]*open_seq[i]
catch[i] = vul[i]*(1-exp(-q*effort[i]))
vul_surv[i] = surv*(vul[i]-catch[i])
invul_surv[i] = invul[i]*surv
refract_surv[i] = (refract[i] + catch[i]*rel_prop*rel_surv)*surv
alive[i] = vul[i]+invul[i]+refract[i]
eff_cum[i] = eff_cum[i-1]+effort[i]                                       #modified from Carl's sheet, I think this makes more sense
cpue[i] = ifelse(effort[i]>0,catch[i]/effort[i],0)
value[i] = effort[i]*max(0,cpue[i]/cpue_base-1)^val_power
}
avg_cpue <- mean(cpue[which(effort>0)])                                          #average cpue where effort>0,
avg_cpue_x_100 <- (mean(cpue[which(effort>0)]))*100                              #*100 to make plotting easier
tot_catch <- sum(catch);   tot_effort <- sum(effort);   tot_val <- sum(value);   #response metrics we might care about
metrics <- as.matrix(data.frame(avg_cpue_x_100, tot_catch, tot_effort, tot_val)) #dumb wrappers to make barplots easy
list(day=day, vul=vul, invul=invul, refract=refract, pmax_eff=pmax_eff, effort=effort, catch=catch,
vul_surv=vul_surv, invul_surv=invul_surv, refract_surv=refract_surv, alive=alive, eff_cum=eff_cum, cpue=cpue,
value=value, avg_cpue_x_100=avg_cpue_x_100, tot_catch= tot_catch, tot_effort = tot_effort, tot_val=tot_val,
avg_cpue=avg_cpue, metrics=metrics)
}
### Report Section ###
#outputs of different closure schedules
op1 = fun(theta, open_seq=all_open)
op2 = fun(theta, open_seq=week_2)
op3 = fun(theta, open_seq=week_1)
op4 = fun(theta, open_seq=twoweek_2)
op5 = fun(theta, open_seq=twoweek_1)
op6 = fun(theta, open_seq=month_1)
par(mar=c(2,2.5,2,2.5),oma=c(2,2,1,0))
layout(matrix(c(1:4),2,2,byrow=F))
barplot(c(op1$avg_cpue,op2$avg_cpue,op3$avg_cpue,op4$avg_cpue,op5$avg_cpue,op6$avg_cpue),main="Catch-per-unit effort",names.arg=1:6)
mtext("Catch-per-unit-effort",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," d"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_catch,op2$tot_catch,op3$tot_catch,op4$tot_catch,op5$tot_catch,op6$tot_catch),main="Total catch",names.arg=1:6)
mtext("Total catch",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_effort,op2$tot_effort,op3$tot_effort,op4$tot_effort,op5$tot_effort,op6$tot_effort),main="Total effort",names.arg=1:6)
mtext("Total effort",2,line=3.5)
mtext(expression(paste("(Angler days "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
legend("topright",legend=c("All open","2 days/week","1 day/week","2 days/2 weeks","1 day/2 weeks","1 day/month"),bty="n",lty=0,pch=49:54,pt.cex=1.3,title="Scenarios")
barplot(c(op1$tot_val,op2$tot_val,op3$tot_val,op4$tot_val,op5$tot_val,op6$tot_val),main="Value",names.arg=1:6)
mtext("Value",2,line=2.2)
par(mfcol=c(1,1))
mtext("Scenario",1,font=2,cex=1,line=2.5)
#par(mfrow=c(2,3), mai=c(.3,.2,.3,.2), omi=c(.6,.7,.1,.1), mgp=c(1,.4,0))
#barplot(op1$metrics, ylim=c(0,2300), main="All Open")
#barplot(op2$metrics, ylim=c(0,2300), main="2 days/week")
#barplot(op3$metrics, ylim=c(0,2300), main="1 day/week")
#barplot(op4$metrics, ylim=c(0,2300), main="2 days/2 weeks")
pdf("Metrics.pdf")
par(mar=c(2,2.5,2,2.5),oma=c(2,2,1,0))
layout(matrix(c(1:4),2,2,byrow=F))
barplot(c(op1$avg_cpue,op2$avg_cpue,op3$avg_cpue,op4$avg_cpue,op5$avg_cpue,op6$avg_cpue),main="Catch-per-unit effort",names.arg=1:6)
mtext("Catch-per-unit-effort",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," d"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_catch,op2$tot_catch,op3$tot_catch,op4$tot_catch,op5$tot_catch,op6$tot_catch),main="Total catch",names.arg=1:6)
mtext("Total catch",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_effort,op2$tot_effort,op3$tot_effort,op4$tot_effort,op5$tot_effort,op6$tot_effort),main="Total effort",names.arg=1:6)
mtext("Total effort",2,line=3.5)
mtext(expression(paste("(Angler days "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
legend("topright",legend=c("All open","2 days/week","1 day/week","2 days/2 weeks","1 day/2 weeks","1 day/month"),bty="n",lty=0,pch=49:54,pt.cex=1.3,title="Scenarios")
barplot(c(op1$tot_val,op2$tot_val,op3$tot_val,op4$tot_val,op5$tot_val,op6$tot_val),main="Value",names.arg=1:6)
mtext("Value",2,line=2.2)
par(mfcol=c(1,1))
mtext("Scenario",1,font=2,cex=1,line=2.5)
#par(mfrow=c(2,3), mai=c(.3,.2,.3,.2), omi=c(.6,.7,.1,.1), mgp=c(1,.4,0))
#barplot(op1$metrics, ylim=c(0,2300), main="All Open")
#barplot(op2$metrics, ylim=c(0,2300), main="2 days/week")
#barplot(op3$metrics, ylim=c(0,2300), main="1 day/week")
#barplot(op4$metrics, ylim=c(0,2300), main="2 days/2 weeks")
dev.off()
l<-length(theta)
elast<-array(dim=c(6,l,2))
theta$val_pow=1.0
for( i in 1:l)
{
op1 = fun(theta, open_seq=all_open)$tot_val
op2 = fun(theta, open_seq=week_2)$tot_val
op3 = fun(theta, open_seq=week_1)$tot_val
op4 = fun(theta, open_seq=twoweek_2)$tot_val
op5 = fun(theta, open_seq=twoweek_1)$tot_val
op6 = fun(theta, open_seq=month_1)$tot_val
theta2<-theta
theta2[i]<-theta[[i]]*0.9
elast[1,i,1] = (fun(theta2, open_seq=all_open)$tot_val-op1)/op1
elast[2,i,1] = (fun(theta2, open_seq=week_2)$tot_val-op2)/op2
elast[3,i,1] = (fun(theta2, open_seq=week_1)$tot_val-op3)/op3
elast[4,i,1] = (fun(theta2, open_seq=twoweek_2)$tot_val-op4)/op4
elast[5,i,1] = (fun(theta2, open_seq=twoweek_1)$tot_val-op5)/op5
elast[6,i,1] = (fun(theta2, open_seq=month_1)$tot_val-op6)/op6
theta2[i]<-theta[[i]]*1.1
elast[1,i,2] = (fun(theta2, open_seq=all_open)$tot_val-op1)/op1
elast[2,i,2] = (fun(theta2, open_seq=week_2)$tot_val-op2)/op2
elast[3,i,2] = (fun(theta2, open_seq=week_1)$tot_val-op3)/op3
elast[4,i,2] = (fun(theta2, open_seq=twoweek_2)$tot_val-op4)/op4
elast[5,i,2] = (fun(theta2, open_seq=twoweek_1)$tot_val-op5)/op5
elast[6,i,2] = (fun(theta2, open_seq=month_1)$tot_val-op6)/op6
}
theta$val_pow=1.5
plot(1:l,elast[5,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.3))
points(1:l,elast[5,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[5,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.3,0.15),labels=seq(-0.3,0.3,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.3))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[5,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.3,0.15),labels=seq(-0.3,0.3,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
cpue_half <- 1.5                #inflection point for logistic effort
sdcpue <- 2.5                   #sigma of logistic effort
theta<-list()
theta$No <- No
theta$M <- M
theta$q <- q
theta$v1 <- v1
theta$v2 <- v2
theta$rel_surv <- rel_surv
theta$recov <- recov
theta$pvul_recov <- pvul_recov
theta$cpue_base <- cpue_base          #catch rate required for a satisfaction or utility of 1
theta$val_power <- val_power          #power function of how satisaction increases with catch rate
theta$cpue_half <- cpue_half                #inflection point for logistic effort
theta$sdcpue <- sdcpue                   #sigma of logistic effort
theta$max_eff_wknd <- max_eff_wknd      #max effort possible on a weekend
theta$max_eff_wkdy <- max_eff_wkdy      #max effort possible on a weekday
#effort sequences
all_open <- rep(1,unit_time)                              #open all the time
week_2 <- rep(c(1,rep(0,5),1),length.out=unit_time)       #open weekends or two days a week
week_1 <- rep(c(1,rep(0,6)),length.out=unit_time)         #Open one weekend day a week
twoweek_2 <- rep(c(1,rep(0,12),1),length.out=unit_time)   #Open two weekend days every two weeks
twoweek_1 <- rep(c(1,rep(0,13)),length.out=unit_time)     #open 1 weekend day every two weeks
month_1 <- rep(c(1,rep(0,29)),length.out=unit_time)       #open 1 weekend day a month
### Procedure Section ###
fun <- function(theta,open_seq){
No <- theta$No
M <- theta$M
q <- theta$q
v1 <- theta$v1
v2 <- theta$v2
rel_surv <- theta$rel_surv
recov <- theta$recov
pvul_recov <- theta$pvul_recov
cpue_base <- theta$cpue_base
val_power <- theta$val_power
cpue_half <- theta$cpue_half
sdcpue <- theta$sdcpue
max_eff_wknd <- theta$max_eff_wknd
max_eff_wkdy <- theta$max_eff_wkdy
surv <- exp(-M)         #survival
#vectors
day <- seq(1,unit_time, by=1)
vul=NULL; invul = NULL; refract = NULL; max_eff = NULL; pmax_eff = NULL;
effort = NULL; catch = NULL; vul_surv = NULL; invul_surv = NULL; refract_surv = NULL;
alive = NULL; eff_cum = NULL; cpue = NULL; value = NULL; obs_err =NULL;
#  open_seq=NULL;
#independent vectors
#  open_seq = week_2;
vul_init <- v1/(v1+v2)*No     #initial number of vulnerable fish
max_cpue <- q*vul_init        #max cpue, don't think this is used
max_eff = rep(c(max_eff_wknd, rep(max_eff_wkdy,5),max_eff_wknd),length.out=unit_time)   #gives the max effort for any given day, assuming potential difference between weekends and weekdays
#initial values
vul[1] = vul_init
invul[1] = No-vul_init
refract[1] = No-(vul[1]+invul[1])
obs_err[1] =    1 #rnorm(1,1, sd_obs)     #set to 1 now, switch to rnorm for observation error and departure from perfect knowledge
pmax_eff[1] = 1/(1+exp(-(q*(obs_err[1]*vul[1])-cpue_half)/sdcpue))
effort[1] = max_eff[1]*pmax_eff[1]*open_seq[1]
eff_cum[1] = effort[1]
catch[1] = vul[1]*(1-exp(-q*effort[1]))
vul_surv[1] = surv*(vul[1]-catch[1])
invul_surv[1] = invul[1]*surv
refract_surv[1] = (refract[1] + catch[1]*rel_prop*rel_surv)*surv
alive = vul[1]+invul[1]+refract[1]
cpue[1] = ifelse(effort[1]>0,catch[1]/effort[1],0)
value[1] = effort[1]*(cpue[1]/cpue_base)^val_power
#time dynamic values
for(i in 2:length(day)){
vul[i] = vul_surv[i-1] - v2*vul_surv[i-1] + v1*invul_surv[i-1] + recov*refract_surv[i-1]*pvul_recov
invul[i] = invul_surv[i-1] - v1*invul_surv[i-1] + v2*vul_surv[i-1] + refract_surv[i-1]*recov*(1-pvul_recov)
refract[i] = refract_surv[i-1]*(1-recov)
obs_err[i] = 1  #rnorm(1,1,sd_obs)
pmax_eff[i] = 1/(1+exp(-(q*(obs_err[i]*vul[i])-cpue_half)/sdcpue))
effort[i] = max_eff[i]*pmax_eff[i]*open_seq[i]
catch[i] = vul[i]*(1-exp(-q*effort[i]))
vul_surv[i] = surv*(vul[i]-catch[i])
invul_surv[i] = invul[i]*surv
refract_surv[i] = (refract[i] + catch[i]*rel_prop*rel_surv)*surv
alive[i] = vul[i]+invul[i]+refract[i]
eff_cum[i] = eff_cum[i-1]+effort[i]                                       #modified from Carl's sheet, I think this makes more sense
cpue[i] = ifelse(effort[i]>0,catch[i]/effort[i],0)
value[i] = effort[i]*max(0,cpue[i]/cpue_base-1)^val_power
}
avg_cpue <- mean(cpue[which(effort>0)])                                          #average cpue where effort>0,
avg_cpue_x_100 <- (mean(cpue[which(effort>0)]))*100                              #*100 to make plotting easier
tot_catch <- sum(catch);   tot_effort <- sum(effort);   tot_val <- sum(value);   #response metrics we might care about
metrics <- as.matrix(data.frame(avg_cpue_x_100, tot_catch, tot_effort, tot_val)) #dumb wrappers to make barplots easy
list(day=day, vul=vul, invul=invul, refract=refract, pmax_eff=pmax_eff, effort=effort, catch=catch,
vul_surv=vul_surv, invul_surv=invul_surv, refract_surv=refract_surv, alive=alive, eff_cum=eff_cum, cpue=cpue,
value=value, avg_cpue_x_100=avg_cpue_x_100, tot_catch= tot_catch, tot_effort = tot_effort, tot_val=tot_val,
avg_cpue=avg_cpue, metrics=metrics)
}
### Report Section ###
#outputs of different closure schedules
op1 = fun(theta, open_seq=all_open)
op2 = fun(theta, open_seq=week_2)
op3 = fun(theta, open_seq=week_1)
op4 = fun(theta, open_seq=twoweek_2)
op5 = fun(theta, open_seq=twoweek_1)
op6 = fun(theta, open_seq=month_1)
par(mar=c(2,2.5,2,2.5),oma=c(2,2,1,0))
layout(matrix(c(1:4),2,2,byrow=F))
barplot(c(op1$avg_cpue,op2$avg_cpue,op3$avg_cpue,op4$avg_cpue,op5$avg_cpue,op6$avg_cpue),main="Catch-per-unit effort",names.arg=1:6)
mtext("Catch-per-unit-effort",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," d"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_catch,op2$tot_catch,op3$tot_catch,op4$tot_catch,op5$tot_catch,op6$tot_catch),main="Total catch",names.arg=1:6)
mtext("Total catch",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_effort,op2$tot_effort,op3$tot_effort,op4$tot_effort,op5$tot_effort,op6$tot_effort),main="Total effort",names.arg=1:6)
mtext("Total effort",2,line=3.5)
mtext(expression(paste("(Angler days "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
legend("topright",legend=c("All open","2 days/week","1 day/week","2 days/2 weeks","1 day/2 weeks","1 day/month"),bty="n",lty=0,pch=49:54,pt.cex=1.3,title="Scenarios")
barplot(c(op1$tot_val,op2$tot_val,op3$tot_val,op4$tot_val,op5$tot_val,op6$tot_val),main="Value",names.arg=1:6)
mtext("Value",2,line=2.2)
par(mfcol=c(1,1))
mtext("Scenario",1,font=2,cex=1,line=2.5)
pdf("Metrics.pdf")
par(mar=c(2,2.5,2,2.5),oma=c(2,2,1,0))
layout(matrix(c(1:4),2,2,byrow=F))
barplot(c(op1$avg_cpue,op2$avg_cpue,op3$avg_cpue,op4$avg_cpue,op5$avg_cpue,op6$avg_cpue),main="Catch-per-unit effort",names.arg=1:6)
mtext("Catch-per-unit-effort",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," d"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_catch,op2$tot_catch,op3$tot_catch,op4$tot_catch,op5$tot_catch,op6$tot_catch),main="Total catch",names.arg=1:6)
mtext("Total catch",2,line=3.5)
mtext(expression(paste("(Fish "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
barplot(c(op1$tot_effort,op2$tot_effort,op3$tot_effort,op4$tot_effort,op5$tot_effort,op6$tot_effort),main="Total effort",names.arg=1:6)
mtext("Total effort",2,line=3.5)
mtext(expression(paste("(Angler days "^{.}," y"^{-1},")")),2,line=2.2,cex=0.9)
legend("topright",legend=c("All open","2 days/week","1 day/week","2 days/2 weeks","1 day/2 weeks","1 day/month"),bty="n",lty=0,pch=49:54,pt.cex=1.3,title="Scenarios")
barplot(c(op1$tot_val,op2$tot_val,op3$tot_val,op4$tot_val,op5$tot_val,op6$tot_val),main="Value",names.arg=1:6)
mtext("Value",2,line=2.2)
par(mfcol=c(1,1))
mtext("Scenario",1,font=2,cex=1,line=2.5)
dev.off()
l<-length(theta)
elast<-array(dim=c(6,l,2))
theta$val_pow=1.0
for( i in 1:l)
{
op1 = fun(theta, open_seq=all_open)$tot_val
op2 = fun(theta, open_seq=week_2)$tot_val
op3 = fun(theta, open_seq=week_1)$tot_val
op4 = fun(theta, open_seq=twoweek_2)$tot_val
op5 = fun(theta, open_seq=twoweek_1)$tot_val
op6 = fun(theta, open_seq=month_1)$tot_val
theta2<-theta
theta2[i]<-theta[[i]]*0.9
elast[1,i,1] = (fun(theta2, open_seq=all_open)$tot_val-op1)/op1
elast[2,i,1] = (fun(theta2, open_seq=week_2)$tot_val-op2)/op2
elast[3,i,1] = (fun(theta2, open_seq=week_1)$tot_val-op3)/op3
elast[4,i,1] = (fun(theta2, open_seq=twoweek_2)$tot_val-op4)/op4
elast[5,i,1] = (fun(theta2, open_seq=twoweek_1)$tot_val-op5)/op5
elast[6,i,1] = (fun(theta2, open_seq=month_1)$tot_val-op6)/op6
theta2[i]<-theta[[i]]*1.1
elast[1,i,2] = (fun(theta2, open_seq=all_open)$tot_val-op1)/op1
elast[2,i,2] = (fun(theta2, open_seq=week_2)$tot_val-op2)/op2
elast[3,i,2] = (fun(theta2, open_seq=week_1)$tot_val-op3)/op3
elast[4,i,2] = (fun(theta2, open_seq=twoweek_2)$tot_val-op4)/op4
elast[5,i,2] = (fun(theta2, open_seq=twoweek_1)$tot_val-op5)/op5
elast[6,i,2] = (fun(theta2, open_seq=month_1)$tot_val-op6)/op6
}
theta$val_pow=1.5
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.3))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[5,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.3,0.15),labels=seq(-0.3,0.3,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
range(elast[3,,])
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.45))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[5,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.45,0.15),labels=seq(-0.3,0.45,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
pdf("Elasticity.pdf")
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.45))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[5,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.45,0.15),labels=seq(-0.3,0.45,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
dev.off()
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.45))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[3,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.45,0.15),labels=seq(-0.3,0.45,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
pdf("Elasticity.pdf")
plot(1:l,elast[3,,1],pch=6,ylab="",xlab="",xaxt="n",yaxt="n",ylim=c(-0.3,0.45))
points(1:l,elast[3,,2],pch=2)
for(j in 1:l)
lines(rep(j,2),elast[3,j,1:2],lty=3)
axis(2,at=seq(-0.3,0.45,0.15),labels=seq(-0.3,0.45,0.15))
abline(h=0,lty=2,lwd=2)
xlabs<-c(expression(paste(italic("N"[0]))),
expression(italic("M")),
expression(italic("q")),
expression(paste(italic("v"[1]))),
expression(paste(italic("v"[2]))),
expression(paste(italic("S"[r]))),
expression(paste(italic("v"[r]))),
expression(paste(italic("p"[v]))),
expression(paste(italic(C[0]))),
expression(italic(beta)),
expression(paste(italic("C"[50]))),
expression(paste(italic("C"[sigma]))),
expression(paste(italic("E"["WE"]))),
expression(paste(italic("E"["WD"]))))
axis(1,at=1:14,labels=xlabs)
mtext("Elasticity",2,line=2.5,cex=1.5)
mtext("Parameter",1,line=2.5,cex=1.5)
dev.off()
